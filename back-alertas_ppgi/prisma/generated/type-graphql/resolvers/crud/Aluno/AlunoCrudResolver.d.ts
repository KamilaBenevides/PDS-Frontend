import { GraphQLResolveInfo } from "graphql";
import { AggregateAlunoArgs } from "./args/AggregateAlunoArgs";
import { CreateAlunoArgs } from "./args/CreateAlunoArgs";
import { CreateManyAlunoArgs } from "./args/CreateManyAlunoArgs";
import { DeleteAlunoArgs } from "./args/DeleteAlunoArgs";
import { DeleteManyAlunoArgs } from "./args/DeleteManyAlunoArgs";
import { FindFirstAlunoArgs } from "./args/FindFirstAlunoArgs";
import { FindManyAlunoArgs } from "./args/FindManyAlunoArgs";
import { FindUniqueAlunoArgs } from "./args/FindUniqueAlunoArgs";
import { GroupByAlunoArgs } from "./args/GroupByAlunoArgs";
import { UpdateAlunoArgs } from "./args/UpdateAlunoArgs";
import { UpdateManyAlunoArgs } from "./args/UpdateManyAlunoArgs";
import { UpsertAlunoArgs } from "./args/UpsertAlunoArgs";
import { Aluno } from "../../../models/Aluno";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateAluno } from "../../outputs/AggregateAluno";
import { AlunoGroupBy } from "../../outputs/AlunoGroupBy";
export declare class AlunoCrudResolver {
    aluno(ctx: any, info: GraphQLResolveInfo, args: FindUniqueAlunoArgs): Promise<Aluno | null>;
    findFirstAluno(ctx: any, info: GraphQLResolveInfo, args: FindFirstAlunoArgs): Promise<Aluno | null>;
    alunos(ctx: any, info: GraphQLResolveInfo, args: FindManyAlunoArgs): Promise<Aluno[]>;
    createAluno(ctx: any, info: GraphQLResolveInfo, args: CreateAlunoArgs): Promise<Aluno>;
    createManyAluno(ctx: any, info: GraphQLResolveInfo, args: CreateManyAlunoArgs): Promise<AffectedRowsOutput>;
    deleteAluno(ctx: any, info: GraphQLResolveInfo, args: DeleteAlunoArgs): Promise<Aluno | null>;
    updateAluno(ctx: any, info: GraphQLResolveInfo, args: UpdateAlunoArgs): Promise<Aluno | null>;
    deleteManyAluno(ctx: any, info: GraphQLResolveInfo, args: DeleteManyAlunoArgs): Promise<AffectedRowsOutput>;
    updateManyAluno(ctx: any, info: GraphQLResolveInfo, args: UpdateManyAlunoArgs): Promise<AffectedRowsOutput>;
    upsertAluno(ctx: any, info: GraphQLResolveInfo, args: UpsertAlunoArgs): Promise<Aluno>;
    aggregateAluno(ctx: any, info: GraphQLResolveInfo, args: AggregateAlunoArgs): Promise<AggregateAluno>;
    groupByAluno(ctx: any, info: GraphQLResolveInfo, args: GroupByAlunoArgs): Promise<AlunoGroupBy[]>;
}
