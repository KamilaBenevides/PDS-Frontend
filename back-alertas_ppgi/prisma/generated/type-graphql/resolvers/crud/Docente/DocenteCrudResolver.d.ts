import { GraphQLResolveInfo } from "graphql";
import { AggregateDocenteArgs } from "./args/AggregateDocenteArgs";
import { CreateDocenteArgs } from "./args/CreateDocenteArgs";
import { CreateManyDocenteArgs } from "./args/CreateManyDocenteArgs";
import { DeleteDocenteArgs } from "./args/DeleteDocenteArgs";
import { DeleteManyDocenteArgs } from "./args/DeleteManyDocenteArgs";
import { FindFirstDocenteArgs } from "./args/FindFirstDocenteArgs";
import { FindManyDocenteArgs } from "./args/FindManyDocenteArgs";
import { FindUniqueDocenteArgs } from "./args/FindUniqueDocenteArgs";
import { GroupByDocenteArgs } from "./args/GroupByDocenteArgs";
import { UpdateDocenteArgs } from "./args/UpdateDocenteArgs";
import { UpdateManyDocenteArgs } from "./args/UpdateManyDocenteArgs";
import { UpsertDocenteArgs } from "./args/UpsertDocenteArgs";
import { Docente } from "../../../models/Docente";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateDocente } from "../../outputs/AggregateDocente";
import { DocenteGroupBy } from "../../outputs/DocenteGroupBy";
export declare class DocenteCrudResolver {
    docente(ctx: any, info: GraphQLResolveInfo, args: FindUniqueDocenteArgs): Promise<Docente | null>;
    findFirstDocente(ctx: any, info: GraphQLResolveInfo, args: FindFirstDocenteArgs): Promise<Docente | null>;
    docentes(ctx: any, info: GraphQLResolveInfo, args: FindManyDocenteArgs): Promise<Docente[]>;
    createDocente(ctx: any, info: GraphQLResolveInfo, args: CreateDocenteArgs): Promise<Docente>;
    createManyDocente(ctx: any, info: GraphQLResolveInfo, args: CreateManyDocenteArgs): Promise<AffectedRowsOutput>;
    deleteDocente(ctx: any, info: GraphQLResolveInfo, args: DeleteDocenteArgs): Promise<Docente | null>;
    updateDocente(ctx: any, info: GraphQLResolveInfo, args: UpdateDocenteArgs): Promise<Docente | null>;
    deleteManyDocente(ctx: any, info: GraphQLResolveInfo, args: DeleteManyDocenteArgs): Promise<AffectedRowsOutput>;
    updateManyDocente(ctx: any, info: GraphQLResolveInfo, args: UpdateManyDocenteArgs): Promise<AffectedRowsOutput>;
    upsertDocente(ctx: any, info: GraphQLResolveInfo, args: UpsertDocenteArgs): Promise<Docente>;
    aggregateDocente(ctx: any, info: GraphQLResolveInfo, args: AggregateDocenteArgs): Promise<AggregateDocente>;
    groupByDocente(ctx: any, info: GraphQLResolveInfo, args: GroupByDocenteArgs): Promise<DocenteGroupBy[]>;
}
